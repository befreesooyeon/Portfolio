// modal.js
import { portfolioData } from './data.js';
import { galleryData } from './galleryData.js';
import { renderProjectDetail } from './works-detail.js';

let currentGalleryIndex = -1;
let modalInited = false;
let currentProjectIndex = -1;

/* -------------------- Í≥µÌÜµ Ïú†Ìã∏ -------------------- */
function isDarkMode() {
return document.body.classList.contains('dark-mode');
}

// Î™®Îã¨ ÎÇ¥ Ïä§ÌÅ¨Î°§ Ïª®ÌÖåÏù¥ÎÑà Ï∞æÍ∏∞
function getScroller() {
const modal = document.getElementById('projectModal');
if (!modal) return null;
return (
  modal.querySelector('.modal-content .content') ||
  modal.querySelector('.modal-content') ||
  modal
);
}

// Î™®Îã¨ Ïä§ÌÅ¨Î°§ Ï¥àÍ∏∞Ìôî
function resetModalScroll() {
const scroller = getScroller();
if (scroller) scroller.scrollTop = 0;
}

function syncModalTheme() {
  const dark = isDarkMode();

  // ---- projectModal (Î∞∞Í≤Ω & ÌÖçÏä§Ìä∏) ----
  const projectModal = document.getElementById('projectModal');
  if (projectModal?.classList.contains('active')) {
    const contentEl = projectModal.querySelector('.modal-content');
    if (contentEl) {
      contentEl.style.backgroundColor = dark ? '#000000' : '#f5f5f5';
    }

    // ÌÖçÏä§Ìä∏ + Î≤ÑÌäº border Ìïú Î≤àÏóê ÏÑ†ÌÉù
    const projectEls = projectModal.querySelectorAll(`
      .modal-content .content .project-visual .inner .bottom .project-text,
      .modal-content .content .project-overview .inner .project-text,
      .modal-content .content .project-block .project-list li,
      .modal-content .content .project-overview .project-block .project-quote,
      #projectModal .modal-content .content .project-overview .project-cta .btn.btn-ghost .btn-rotate
    `);

    projectEls.forEach(el => {
      if (el.classList.contains('btn-rotate')) {
        // Î≤ÑÌäº border-color
        el.style.setProperty('border-color', dark ? '#dbdbdb' : '#252525', 'important');
      } else {
        // ÌÖçÏä§Ìä∏ color
        el.style.setProperty('color', dark ? '#999999' : '#666666', 'important');
      }
    });
  }

  // ---- photoModal (Î∞∞Í≤Ω Ìà¨Î™Ö & ÌôîÏÇ¥Ìëú stroke) ----
  const photoModal = document.getElementById('photoModal');
  if (photoModal?.classList.contains('active')) {
    const photoContent = photoModal.querySelector('.modal-content');
    if (photoContent) {
      // Ìï≠ÏÉÅ Ìà¨Î™Ö Î∞∞Í≤Ω(ÏöîÏ≤≠ÏÇ¨Ìï≠) ‚Äî ÌÖåÎßàÏôÄ Î¨¥Í¥Ä
      photoContent.style.backgroundColor = 'transparent';
    }

    // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î≤ÑÌäº ÏÉâ: currentColor ÏÇ¨Ïö© + path stroke ÎèôÏãú Í∞ïÏ†ú
    const arrowColor = dark ? '#dbdbdb' : '#252525';

    const navBtns = photoModal.querySelectorAll('.modal-nav-btn');
    navBtns.forEach(btn => {
      btn.style.setProperty('color', arrowColor, 'important');
    });

    const paths = photoModal.querySelectorAll('.modal-nav-btn svg path');
    paths.forEach(p => {
      p.setAttribute('stroke', arrowColor);
      p.style.setProperty('stroke', arrowColor, 'important');
    });
  }
}


const themeObserver = new MutationObserver(mutations => {
for (const m of mutations) {
  if (m.type === 'attributes' && m.attributeName === 'class' && m.target === document.body) {
    // Îã§ÌÅ¨/ÎùºÏù¥Ìä∏ Ï†ÑÌôò Ïãú, Ïó¥Î†§ ÏûàÎäî Î™®Îã¨Ïóê Ï¶âÏãú Î∞òÏòÅ
    syncModalTheme();
  }
}
});
themeObserver.observe(document.body, { attributes: true });



/* -------------------- Modal Open/Close -------------------- */
export function openModal(modalId) {
const modal = document.getElementById(modalId);
if (!modal) return;

document.body.classList.add('modal-open');
document.body.style.overflow = 'hidden';
modal.classList.add('active');

const header = document.querySelector('header');
if (header?.style) header.style.zIndex = 0;

document.querySelector('.narrative-container')?.classList.add('modal-open');

resetModalScroll();

const content = modal.querySelector('.modal-content');

if (content) {
  if (modalId === 'folderModal') {
    // üìÇ ÏûëÏùÄ Î™®Îã¨: scale + slide
    gsap.fromTo(
      content,
      { scale: 0.95, y: 20, opacity: 1 },
      { scale: 1, y: 0, opacity: 1, duration: 0.35, ease: 'power2.out' }
    );
  } else if (modalId === 'photoModal') {
    // üñº Ìè¨ÌÜ† Î™®Îã¨: zoom in
    gsap.fromTo(
      content,
      { scale: 1.05, opacity: 1 },
      { scale: 1, opacity: 1, duration: 0.35, ease: 'power2.out' }
    );
  } else {
    // üìå ÌíÄÏÇ¨Ïù¥Ï¶à Î™®Îã¨ (fortune/project): slide only
    gsap.fromTo(
      content,
      { y: 1920, opacity: 1 },
      { y: 0, opacity: 1, duration: 0.4, ease: 'power2.out' }
    );
  }
}

//  Î™®Îã¨ÏùÑ Ïó∞ ÏßÅÌõÑ ÌÖåÎßà Î∞òÏòÅ (Ïï†Îãà ÎÅùÎÇòÍ∏∞ Í∏∞Îã§Î¶¥ ÌïÑÏöî ÏóÜÏùå)
syncModalTheme();
// ÌòπÏãú GSAPÍ∞Ä Ï§ëÍ∞ÑÏóê Í∞íÏùÑ Í±¥ÎìúÎ†§ÎèÑ Ìïú ÌîÑÎ†àÏûÑ Îí§ Îã§Ïãú Í≥†Ï†ï
requestAnimationFrame(syncModalTheme);
}

export function closeModal() {
document.querySelectorAll('.modal-overlay.active').forEach(modal => {
  const content = modal.querySelector('.modal-content');

  if (content) {
    if (modal.id === 'folderModal') {
      // üìÇ ÏûëÏùÄ Î™®Îã¨
      gsap.to(content, {
        scale: 0.95,
        y: 20,
        duration: 0.25,
        ease: 'power2.in',
        onComplete: () => {
          modal.classList.remove('active');
          gsap.set(content, { clearProps: 'all' });
        }
      });
    } else if (modal.id === 'photoModal') {
      // üñº Ìè¨ÌÜ† Î™®Îã¨
      gsap.to(content, {
        scale: 0.95,
        duration: 0.25,
        ease: 'power2.in',
        onComplete: () => {
          modal.classList.remove('active');
          gsap.set(content, { clearProps: 'all' });
        }
      });
    } else {
      // üìå ÌíÄÏÇ¨Ïù¥Ï¶à Î™®Îã¨ (fortune/project): slide only
      gsap.to(content, {
        y: 1920,
        duration: 0.6,
        ease: 'power2.inOut',
        onComplete: () => {
          modal.classList.remove('active');
          gsap.set(content, { clearProps: 'all' });
        }
      });
    }
  } else {
    modal.classList.remove('active');
  }
});

// Í≥µÌÜµ Ï≤òÎ¶¨
document.body.classList.remove('modal-open');
document.body.style.overflow = '';
document.querySelector('.narrative-container')?.classList.remove('modal-open');

const header = document.querySelector('header');
if (header) header.style.zIndex = 10000;

currentGalleryIndex = -1;

resetModalScroll();

if (window.ScrollTrigger) {
  const modal = document.getElementById('projectModal');
  const inModal = el => modal && modal.contains(el);
  ScrollTrigger.getAll().forEach(st => {
    if (inModal(st.trigger)) st.kill();
  });
  ScrollTrigger.refresh();
}
}

/* -------------------- Photo Modal -------------------- */
function updatePhotoModal(galleryItem, index) {
  const modalContent = document.querySelector('#photoModal .content');
  currentGalleryIndex = index;
  if (!modalContent) return;

  // =========================
  // 1Ô∏è‚É£ Î™®Îã¨ ÏΩòÌÖêÏ∏† ÏÉùÏÑ±
  // =========================
  modalContent.innerHTML = `
    <p class="modal-close-btn">CLOSE</p>

    <button class="modal-nav-btn modal-nav-prev" ${index === 0 ? 'disabled' : ''}>
      <svg xmlns="http://www.w3.org/2000/svg" width="60" height="36" viewBox="0 0 60 36" fill="none">
        <path d="M20 0.5C20 2.355 18.1675 5.125 16.3125 7.45C13.9275 10.45 11.0775 13.0675 7.81 15.065C5.36 16.5625 2.39 18 0 18
        C2.39 18 5.3625 19.4375 7.81 20.935C11.0775 22.935 13.9275 25.5525 16.3125 28.5475C18.1675 30.875 20 33.65 20 35.5
        M0 18L60 18" stroke="currentColor" stroke-width="1.5"/>
      </svg>
    </button>

    <button class="modal-nav-btn modal-nav-next" ${index === galleryData.length - 1 ? 'disabled' : ''}>
      <svg xmlns="http://www.w3.org/2000/svg" width="60" height="36" viewBox="0 0 60 36" fill="none">
        <path d="M40 0.5C40 2.355 41.8325 5.125 43.6875 7.45C46.0725 10.45 48.9225 13.0675 52.19 15.065C54.64 16.5625 57.61 18 60 18
        C57.61 18 54.6375 19.4375 52.19 20.935C48.9225 22.935 46.0725 25.5525 43.6875 28.5475C41.8325 30.875 40 33.65 40 35.5
        M60 18L0 18" stroke="currentColor" stroke-width="1.5"/>
      </svg>
    </button>

    <div class="modal-photo-wrapper">
      <img src="${galleryItem.image}" alt="${galleryItem.title}" class="modal-photo-image" />
    </div>

    <div class="modal-photo-info">
      <h3 class="modal-photo-title">${galleryItem.title}</h3>
      <p class="modal-photo-description">${galleryItem.description}</p>
    </div>
  `;

  // =========================
  // 2Ô∏è‚É£ ÌÖåÎßà ÎèôÍ∏∞Ìôî
  // =========================
  syncModalTheme();

  // =========================
  // 3Ô∏è‚É£ Î≤ÑÌäº Ïù¥Î≤§Ìä∏ ÏÉàÎ°ú Îì±Î°ù
  // =========================
  const prevBtn = modalContent.querySelector(".modal-nav-prev");
  const nextBtn = modalContent.querySelector(".modal-nav-next");

  if (prevBtn) {
    prevBtn.addEventListener("click", () => {
      lastDirection = "prev";
      navigateGallery("prev");
    });
  }

  if (nextBtn) {
    nextBtn.addEventListener("click", () => {
      lastDirection = "next";
      navigateGallery("next");
    });
  }

  // =========================
  // 4Ô∏è‚É£ GSAP Ïï†ÎãàÎ©îÏù¥ÏÖò
  // =========================
  const img = modalContent.querySelector(".modal-photo-image");
  const title = modalContent.querySelector(".modal-photo-title");
  const desc = modalContent.querySelector(".modal-photo-description");

  const direction = (typeof lastDirection !== "undefined") ? lastDirection : "next";
  const xDir = direction === "next" ? 100 : -100;

  gsap.set(img, { opacity: 0, x: xDir, filter: "blur(10px)" });
  gsap.set([title, desc], { opacity: 0, y: 40 });

  const tl = gsap.timeline();
  tl.to(img, {
    opacity: 1,
    x: 0,
    filter: "blur(0px)",
    duration: 0.9,
    ease: "power3.out"
  })
  .to(title, {
    opacity: 1,
    y: 0,
    duration: 0.6,
    ease: "power2.out"
  }, "-=0.4")
  .to(desc, {
    opacity: 1,
    y: 0,
    duration: 0.6,
    ease: "power2.out"
  }, "-=0.45");
}

function navigateGallery(direction) {
const newIndex = direction === 'prev' ? currentGalleryIndex - 1 : currentGalleryIndex + 1;
if (newIndex >= 0 && newIndex < galleryData.length)
  updatePhotoModal(galleryData[newIndex], newIndex);
}


/* -------------------- Project Detail -------------------- */
function killModalScrollTriggers() {
if (!window.ScrollTrigger) return;
const scroller = getScroller();
if (!scroller) return;
ScrollTrigger.getAll().forEach(st => {
  if (st.trigger && scroller.contains(st.trigger)) st.kill();
});
}

function initProjectMediaScroll() {
if (!window.gsap || !window.ScrollTrigger) return;
gsap.registerPlugin(ScrollTrigger);

const scroller = getScroller();
if (!scroller) return;

killModalScrollTriggers();

// Î∞∞ÎÑà Ïù¥ÎØ∏ÏßÄ Ìå®Îü¥Îü≠Ïä§
const bannerImg = scroller.querySelector('.project-banner .project-banner-image');
if (bannerImg) {
  gsap.set(bannerImg, { yPercent: -10, willChange: 'transform' });
  gsap.to(bannerImg, {
    yPercent: 10,
    ease: 'none',
    scrollTrigger: {
      trigger: bannerImg.closest('.project-banner'),
      scroller,
      start: 'top bottom',
      end: 'bottom top',
      scrub: true
    }
  });
}

// ÌîÑÎ°úÏ†ùÌä∏ ÎØ∏ÎîîÏñ¥ Ïï†ÎãàÎ©îÏù¥ÏÖò
scroller.querySelectorAll('.project-media').forEach(section => {
  const track = section.querySelector('.imgBoxSli');
  const box1 = track?.querySelector('.Box1');
  const box2 = track?.querySelector('.Box2');
  const title = section.querySelector('.categoryTit');
  const phoneM = section.querySelector('.phoneM');
  const phone1 = phoneM?.querySelector('.phone1');
  const phone2 = phoneM?.querySelector('.phone2');
  const phone3 = phoneM?.querySelector('.phone3');

  if (box1) gsap.set(box1, { xPercent: 0, willChange: 'transform' });
  if (box2) gsap.set(box2, { xPercent: 0, willChange: 'transform' });
  if (title) gsap.set(title, { xPercent: 0, willChange: 'transform', position: 'relative' });
  if (phoneM) gsap.set([phone1, phone2, phone3], { yPercent: 0, willChange: 'transform' });

  const tl = gsap.timeline({
    scrollTrigger: {
      trigger: section,
      scroller,
      start: 'top bottom',
      end: 'bottom center',
      scrub: 1,
      invalidateOnRefresh: true
    }
  });

  if (box1) tl.to(box1, { xPercent: -50, ease: 'none' }, 0);
  if (box2) tl.to(box2, { xPercent: 50, ease: 'none' }, 0);
  if (title) tl.to(title, { xPercent: 100, ease: 'none' }, 0);

  if (phone1) tl.to(phone1, { yPercent: 20, ease: 'none' }, 0);
  if (phone2) tl.to(phone2, { yPercent: -10, ease: 'none' }, 0);
  if (phone3) tl.to(phone3, { yPercent: 20, ease: 'none' }, 0);

  const imgs = section.querySelectorAll('img');
  if (imgs.length) {
    const onSettled = () => ScrollTrigger.refresh();
    imgs.forEach(img => {
      if (img.complete) return;
      img.addEventListener('load', onSettled, { once: true });
      img.addEventListener('error', onSettled, { once: true });
    });
  }
});


ScrollTrigger.refresh();
}

function updateProjectNavTitles(index) {
const prevTitleEl = document.getElementById('prevTitle');
const nextTitleEl = document.getElementById('nextTitle');
if (!prevTitleEl || !nextTitleEl) return;

const total = portfolioData.length;
const prevIndex = (index - 1 + total) % total;
const nextIndex = (index + 1) % total;

prevTitleEl.textContent =
  portfolioData[prevIndex]?.navTitle || portfolioData[prevIndex]?.title || '';
nextTitleEl.textContent =
  portfolioData[nextIndex]?.navTitle || portfolioData[nextIndex]?.title || '';
}

function mountProject(project) {
const scroller = getScroller();
if (!scroller) return;

killModalScrollTriggers();

// Í∏∞Ï°¥ ÏÉÅÏÑ∏ Ï†úÍ±∞ ÌõÑ ÏÉàÎ°ú Î†åÎçîÎßÅ
scroller.querySelector('.project-detail')?.remove();
const html = renderProjectDetail(project);
const wrapper = document.createElement('div');
wrapper.className = 'project-detail';
wrapper.innerHTML = html;
scroller.appendChild(wrapper);

currentProjectIndex = portfolioData.findIndex(p => String(p.id) === String(project.id));
resetModalScroll();
updateProjectNavTitles(currentProjectIndex);

// ÏΩòÌÖêÏ∏† ÍµêÏ≤¥ ÌõÑÏóêÎèÑ ÌÖåÎßà Ïû¨Ï†ÅÏö© (Î∞∞Í≤Ω/ÌÖçÏä§Ìä∏)
syncModalTheme();

requestAnimationFrame(() => {
  initProjectMediaScroll();
});
}

/* -------------------- Init Triggers -------------------- */
export function initModalTriggers() {
if (modalInited) return;
modalInited = true;

// folder modal
document.querySelector('.now .inner .folder-content')?.addEventListener('click', () =>
  openModal('folderModal')
);

// fortune modal
document.querySelector('.fortune-trigger')?.addEventListener('click', e => {
  e.preventDefault();
  openModal('fortuneModal');
});

document.addEventListener('click', e => {
  if (e.target.classList.contains('modal-close-btn')) {
    e.preventDefault();
    closeModal();
    return;
  }

  if (e.target.closest('.modal-nav-prev')) navigateGallery('prev');
  if (e.target.closest('.modal-nav-next')) navigateGallery('next');

  // photo modal
  if (e.target.classList.contains('photo-view-btn')) {
    e.preventDefault();
    const title = e.target.getAttribute('data-title');
    const idx = galleryData.findIndex(item => item.title === title);
    if (idx !== -1) {
      updatePhotoModal(galleryData[idx], idx);
      openModal('photoModal'); // open ÌõÑÏóêÎèÑ sync Ìò∏Ï∂úÎê®
    }
    return;
  }

  // project modal ÎÇ¥Î∂Ä ÎÑ§ÎπÑ
  if (e.target.closest('.project-nav-prev')) {
    e.preventDefault();
    if (currentProjectIndex < 0) return;
    const total = portfolioData.length;
    const prevIndex = (currentProjectIndex - 1 + total) % total;
    mountProject(portfolioData[prevIndex]);
    return;
  }
  if (e.target.closest('.project-nav-next')) {
    e.preventDefault();
    if (currentProjectIndex < 0) return;
    const total = portfolioData.length;
    const nextIndex = (currentProjectIndex + 1) % total;
    mountProject(portfolioData[nextIndex]);
    return;
  }
});

document.addEventListener('keydown', e => {
  if (e.key === 'Escape') closeModal();

  const photoModal = document.getElementById('photoModal');
  if (photoModal?.classList.contains('active')) {
    if (e.key === 'ArrowLeft') navigateGallery('prev');
    if (e.key === 'ArrowRight') navigateGallery('next');
  }
});

document.querySelectorAll('.r').forEach(btn =>
  btn.addEventListener('click', closeModal)
);
document.querySelectorAll('.modal-overlay').forEach(overlay => {
  overlay.addEventListener('click', function (e) {
    if (e.target === this) closeModal();
  });
});

// project modal: Ïπ¥Îìú ÌÅ¥Î¶≠ÏúºÎ°ú Ïó¥Í∏∞
const portfolioGrid = document.querySelector('.portfolio-grid');
if (portfolioGrid) {
  portfolioGrid.addEventListener('click', e => {
    const card = e.target.closest('.card');
    if (!card) return;
    const id = String(card.dataset.id);
    const project = portfolioData.find(item => String(item.id) === id);
    if (!project) return;

    mountProject(project);
    openModal('projectModal'); // open ÌõÑÏóêÎèÑ sync Ìò∏Ï∂úÎê®
  });
}
}
